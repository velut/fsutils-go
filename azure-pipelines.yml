# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

strategy:
  matrix:
    linux:
      imageName: ubuntu-latest
      gorootDir: /usr/local
    mac:
      imageName: macos-latest
      gorootDir: /usr/local
    windows:
      imageName: windows-latest
      gorootDir: C:\
  maxParallel: 3

pool:
  vmImage: $(imageName)

variables:
  GOROOT: '$(gorootDir)/go' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  GOVERSION: 1.12
  GO111MODULE: 'on'

steps:
- bash: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- task: GoTool@0
  inputs:
    version: $(GOVERSION)
  displayName: 'Install Go $(GOVERSION)'

- bash: |
    printf "Go location: $(which go)\n"
    printf "Go version: $(go version)\n"
    printf "\n\nGo environment:\n\n"
    go env
    printf "\n\nSystem environment:\n\n"
    env
  displayName: Print environment info

- bash: |
    go get github.com/magefile/mage
    go get github.com/jstemmer/go-junit-report
    go get github.com/axw/gocov/gocov
    go get github.com/AlekSi/gocov-xml
    curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.17.1
  displayName: 'Install testing tools'

- bash: |
    printf "Mage location: $(which mage)\n"
    printf "Mage version:\n"
    printf mage -version
    printf "\n\nGolangci-lint location: $(which golangci-lint)\n\n"
    printf "Golangci-lint version:\n"
    printf golangci-lint --version
  displayName: Print tools info

- bash: |
    mage -v lintall
  workingDirectory: '$(modulePath)'
  displayName: 'Run linters'

- bash: |
    mage -v test
  workingDirectory: '$(modulePath)'
  displayName: 'Run tests'

- bash: |
    go test -v -coverprofile=c.out -covermode count ./fs 2>&1 | go-junit-report > report.xml
    gocov convert c.out > coverage.json
    gocov-xml < coverage.json > coverage.xml
    mkdir coverage
    go tool cover -html=c.out -o coverage/index.html
  workingDirectory: '$(modulePath)'
  displayName: 'Generate coverage report'

- task: PublishTestResults@2
  inputs:
    testRunner: JUnit
    testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
  displayName: 'Publish test results'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura 
    summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage
  displayName: 'Publish coverage results'
